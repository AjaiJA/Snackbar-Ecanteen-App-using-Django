# Generated by Django 3.2 on 2021-10-16 12:06

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('User_id', models.CharField(max_length=30)),
                ('Food_id', models.CharField(max_length=30)),
                ('Added_time', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'Cart',
            },
        ),
        migrations.CreateModel(
            name='FoodItems',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('food_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('food_name', models.CharField(max_length=40)),
                ('food_image', models.ImageField(upload_to='foods/')),
                ('food_rate_per_quantity', models.DecimalField(decimal_places=2, max_digits=5)),
                ('food_available_total_quantity', models.IntegerField()),
                ('food_description', models.TextField(blank=True, null=True)),
                ('food_ingredients', models.TextField(blank=True, null=True)),
                ('food_pros', models.CharField(max_length=255)),
                ('food_category', models.CharField(default='snacks', max_length=25)),
                ('currently_ordered_quantity', models.IntegerField()),
                ('till_now_ordered_total_quantity', models.IntegerField()),
                ('is_food_available', models.BooleanField(default=False)),
                ('food_added_date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'FoodItems',
            },
        ),
        migrations.CreateModel(
            name='UserAccounts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('User_id', models.CharField(max_length=30, unique=True)),
                ('Address', models.TextField(blank=True, null=True)),
                ('pincode', models.CharField(blank=True, max_length=10, null=True)),
                ('District', models.CharField(max_length=30)),
                ('State', models.CharField(max_length=30)),
                ('Country', models.CharField(max_length=30)),
                ('mobile_no', models.CharField(max_length=20)),
                ('email_verification_token', models.CharField(blank=True, max_length=255, null=True)),
                ('forgot_password_token', models.CharField(blank=True, max_length=255, null=True)),
                ('otp_code', models.CharField(blank=True, max_length=10, null=True)),
                ('is_email_Verified', models.BooleanField(default=False)),
                ('is_phone_Verified', models.BooleanField(default=False)),
                ('profile_image', models.ImageField(blank=True, default='Media/users/userSnackBar2021.png', upload_to='users/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'UserAccounts',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
